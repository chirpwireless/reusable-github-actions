name: Deploy a Terraform with Terragrunt
on:
  workflow_call:
    inputs:
      version:
        description: "Git reference (branch, tag or SHA) of commit to deploy"
        type: string
      environment:
        required: true
        description: "Environment (Terraform environment)"
        type: string
      tf_version:
        description: "Terraform version to use"
        type: string
        default: "1.10.3"
      tg_version:
        description: "Terragrunt version to use"
        type: string
        default: "0.71.1"
      tg_working_dir:
        description: "Directory in which Terragrunt will be invoked"
        type: string
        required: true

env:
  HOME: ${{github.workspace}}

jobs:
  fetch_version:
    runs-on:
      group: gke-non-prod
    outputs:
      version: ${{steps.fetch-version.outputs.version}}
    steps:
      - id: fetch-version
        uses: chirpwireless/reusable-github-actions/.github/actions/version-fetch@main
        with:
          git-ref: ${{ inputs.version }}
      - run: |
          echo "Deploying the version ${{steps.fetch-version.outputs.version}}" > $GITHUB_STEP_SUMMARY

  setup:
    runs-on:
      group: gke-non-prod
    outputs:
      scw_profile: ${{ steps.setup.outputs.scw_profile }}
    steps:
      - name: Setup profile
        id: setup
        run: |
          # Check if the input matches any of the expected values
          if [[ "${{ github.event.inputs.environment }}" == "live/non-prod/"* ]]; then
              echo "scw_profile=chirp-non-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment }}" == "live/prod/"* ]]; then
              echo "scw_profile=chirp-prod" >> $GITHUB_OUTPUT
          else
              echo "Unknown environment: ${{ github.event.inputs.environment }}"
              exit 1  # Fail the job if the environment is unknown
          fi

  plan:
    name: "Plan deploy to ${{inputs.environment}}"
    needs: [fetch_version, setup]
    runs-on:
      group: gke-non-prod
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.fetch_version.outputs.version }}

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.GOLANG_BUILDER_APP_ID }}
          private-key: ${{ secrets.GOLANG_BUILDER_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Create a deploy plan using Terragrunt
        uses: gruntwork-io/terragrunt-action@v2
        env:
          AWS_PROFILE: ${{ needs.setup.outputs.scw_profile}}
          SCW_PROFILE: ${{ needs.setup.outputs.scw_profile}}
          # Configure Git to use installation token
          INPUT_PRE_EXEC_1: |
            git config --global url."https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"
          # Configure Scaleway and AWS credentials
          INPUT_PRE_EXEC_2: |
            mkdir -p $HOME/.aws
            mkdir -p $HOME/.config/scw
            echo "${{ secrets.SCW_AWS_CREDENTIALS }}" > $HOME/.aws/credentials
            echo "${{ secrets.SCW_CREDENTIALS }}" > $HOME/.config/scw/config.yaml
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_working_dir }}
          tg_command: "run-all plan"

  deploy:
    name: "Deploy to ${{inputs.environment}}"
    needs: [fetch_version, setup, plan]
    runs-on:
      group: gke-non-prod
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.fetch_version.outputs.version }}

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.GOLANG_BUILDER_APP_ID }}
          private-key: ${{ secrets.GOLANG_BUILDER_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Deploy using Terragrunt
        uses: gruntwork-io/terragrunt-action@v2
        env:
          AWS_PROFILE: ${{ needs.setup.outputs.scw_profile}}
          SCW_PROFILE: ${{ needs.setup.outputs.scw_profile}}
          # Configure Git to use installation token
          INPUT_PRE_EXEC_1: |
            git config --global url."https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/".insteadOf "https://github.com/"
          # Configure Scaleway and AWS credentials
          INPUT_PRE_EXEC_2: |
            mkdir -p $HOME/.aws
            mkdir -p $HOME/.config/scw
            echo "${{ secrets.SCW_AWS_CREDENTIALS }}" > $HOME/.aws/credentials
            echo "${{ secrets.SCW_CREDENTIALS }}" > $HOME/.config/scw/config.yaml
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_working_dir }}
          tg_command: "run-all apply"
