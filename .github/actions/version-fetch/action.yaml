name: 'Fetch Version'
description: 'Fetches published build version from a git ref. By default will fetch latest release.'

inputs:
  git-ref:
    description: 'Git ref (branch, tag or SHA) to fetch build version'
    required: false
    default: ''
  check-name:
    description: 'The name of the check containing the build version'
    required: false
    default: 'chirp:version'
  github-token:
    description: 'The GitHub token'
    required: true
    default: ${{ github.token }}

outputs:
  version:
    description: 'Build version fetched from git ref'
    value: ${{ steps.fetch-version.outputs.result }}

runs:
  using: 'composite'
  steps:
    - id: fetch-git-ref
      shell: bash
      run: |
        if [ -z "${{ inputs.git-ref }}" ]; then
          if [[ "${{ github.ref_name }}" != "main" && "${{ github.ref_name }}" != "master" ]]; then
            echo "Using github.ref_name: ${{ github.ref_name }}"
            echo "::set-output name=git-ref::${{ github.ref_name }}"
          else
            echo "Branch is main or master, but version not defined. Defaulting to the last value."
            echo "::set-output name=git-ref::"
          fi
        else
          echo "Version is defined: ${{ inputs.version }}"
          echo "::set-output name=git-ref::${{ inputs.version }}"
        fi
    - id: fetch-ref
      uses: actions/github-script@v7
      with:
        result-encoding: string
        github-token: ${{ inputs.github-token }}
        script: |
          const { fetchRef } = require(`${process.env.GITHUB_ACTION_PATH}/script.js`)
          return fetchRef({ github, context, core });

    - id: fetch-version
      uses: actions/github-script@v7
      env:
        GIT_REF: ${{ steps.fetch-ref.outputs.result }}
        CHECK_NAME: ${{ inputs.check-name }}
      with:
        result-encoding: string
        github-token: ${{ inputs.github-token }}
        script: |
          const { fetchVersion } = require(`${process.env.GITHUB_ACTION_PATH}/script.js`)
          return fetchVersion({ github, context, core });

    - id: log-output
      shell: bash
      run: echo ${{ steps.fetch-version.outputs.result }}