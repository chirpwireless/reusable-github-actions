name: 'Fetch Version'
description: 'Fetches published build version from a git ref. By default will fetch latest release.'

inputs:
  repository:
    description: 'Repository to fetch build version from'
    required: false
    default: ''

  git-ref:
    description: 'Git ref (branch, tag or SHA) to fetch build version'
    required: false
    default: ''

  check-name:
    description: 'The name of the check containing the build version'
    required: false
    default: 'chirp:version'

  github-token:
    description: 'The GitHub token'
    required: true
    default: ${{ github.token }}

  default-value:
    description: 'Default value to use if version cannot be fetched. Returned when `continue-on-error` is enabled.'
    required: false
    default: ''

outputs:
  version:
    description: 'Build version fetched from git ref'
    value: ${{ steps.fetch-version.outputs.result }}

runs:
  using: 'composite'
  steps:
    - id: fetch-release
      if: ${{ inputs.git-ref == '' }}
      uses: actions/github-script@v7
      env:
        REPO: ${{ inputs.repository }}
      with:
        result-encoding: string
        github-token: ${{ inputs.github-token }}
        script: |
          const { fetchRelease } = require(`${process.env.GITHUB_ACTION_PATH}/script.js`)
          return fetchRelease({ github, context, core });

    - id: fetch-version
      uses: actions/github-script@v7
      env:
        REPO: ${{ inputs.repository }}
        GIT_REF: ${{ steps.fetch-release.outputs.result || inputs.git-ref }}
        CHECK_NAME: ${{ inputs.check-name }}
        DEFAULT_VALUE: ${{ inputs.default-value }}
      with:
        result-encoding: string
        github-token: ${{ inputs.github-token }}
        script: |
          const { fetchVersion } = require(`${process.env.GITHUB_ACTION_PATH}/script.js`)
          return fetchVersion({ github, context, core });

    - id: log-output
      shell: bash
      run: echo ${{ steps.fetch-version.outputs.result }}